<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[后台发布文章测试]]></title>
    <url>%2F2018%2F10%2F15%2F%E5%90%8E%E5%8F%B0%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0%E6%B5%8B%E8%AF%95%2F</url>
    <content type="text"><![CDATA[背景&emsp;&emsp;1946年，美国学者埃德加·戴尔(Edgar Dale)提出了“经验之塔”(Cone of Experience)的理论，通过一个扇面图形象的给出了各种不同的教学或学习方式所导致的最终效果差异。这个图示在教育技术领域产生了广泛的影响。后来，经过一系列的改编，经验之塔扇面图图变成了目前的学习金字塔(Cone of Learning)。通过考察学习者在两周以后还能记住内容(平均学习保持率)的多少，学习金字塔直观表示了不同学习方式的效果。]]></content>
  </entry>
  <entry>
    <title><![CDATA[【SpringBoot系列】二：SpringBoot配置详解]]></title>
    <url>%2F2018%2F10%2F15%2F%E3%80%90SpringBoot%E7%B3%BB%E5%88%97%E3%80%91%E4%BA%8C%EF%BC%9ASpringBoot%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[通过上一篇博客对Spring Boot的介绍，你也看见了Spring Boot并不真正是所谓的『零配置』，他的理念是“习惯优于配置”采用了一些默认的习惯性配置，让你无需手动进行配置，从而让你的项目快速运行起来。所以要想玩转Spring Boot，了解这些默认配置还是必不可少的。 创建Spring Boot项目时，会默认生成一个全局配置文件application.properties(可以修改后缀为.yml)，在src/main/resources目录下或者类路径的/config下。我们可以通过修改该配置文件来对一些默认配置的配置值进行修改。 自定义属性我们可以在application.yml文件中，配置一些常量或者其他参数配置。读取的时候通过Spring的@Value(“${属性名}”)注解即可。 在application.yml定义几个常量： 12ip: 111.111.111.111port: 8080 在Controller读取该配置：123456789101112131415161718/** * Created by qianqian.niu on 2017/6/27. */@RestControllerpublic class HelloConfigController &#123; @Value(&quot;$&#123;ip&#125;&quot;) private String ip; @Value(&quot;$&#123;port&#125;&quot;) private String port; @GetMapping(&quot;/getHost&quot;) public String getHost() &#123; return &quot;ip:&quot; + ip + &quot; port:&quot; + port; &#125;&#125; 访问 http://localhost:8080/getHost 显示：； 1ip:111.111.111.111 port:8080 实体类属性赋值： 当属性参数变多的时候，我们习惯创建一个实体，用实体来统一接收赋值这些属性。 定义配置文件： 123456UserBody: name: erniuxxx password: 888 birthday: 1992.10.28 mobile: 133xxxx address: 北京市朝阳区 创建实体类： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263/** * Created by qianqian.niu on 2017/6/27. */@ConfigurationProperties(prefix = &quot;UserBody&quot;)public class UserBody &#123; private String name; private String password; private String birthday; private String mobile; private String address; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public String getPassword() &#123; return password; &#125; public void setPassword(String password) &#123; this.password = password; &#125; public String getBirthday() &#123; return birthday; &#125; public void setBirthday(String birthday) &#123; this.birthday = birthday; &#125; public String getMobile() &#123; return mobile; &#125; public void setMobile(String mobile) &#123; this.mobile = mobile; &#125; public String getAddress() &#123; return address; &#125; public void setAddress(String address) &#123; this.address = address; &#125; @Override public String toString() &#123; return &quot;UserBody&#123;&quot; + &quot;name=&apos;&quot; + name + &apos;\&apos;&apos; + &quot;, password=&apos;&quot; + password + &apos;\&apos;&apos; + &quot;, birthday=&apos;&quot; + birthday + &apos;\&apos;&apos; + &quot;, mobile=&apos;&quot; + mobile + &apos;\&apos;&apos; + &quot;, address=&apos;&quot; + address + &apos;\&apos;&apos; + &apos;&#125;&apos;; &#125;&#125; 需要在实体类上增加注解@ConfigurationProperties，并指定prrfix前缀。 controller调用： 12345678910111213141516/** * Created by qianqian.niu on 2017/6/27. */@RestController@EnableConfigurationProperties(&#123;UserBody.class&#125;)public class HelloController &#123; @Autowired UserBody userBody; @GetMapping(&quot;/getUser&quot;) public String getUser()&#123; return userBody.toString(); &#125;&#125; EnableConfigurationProperties注解需要加在调用类上，或者加在启动类SpringbootSimpleApplication上也可以。 调用 http://localhost:8080/getUser 1UserBody&#123;name=&apos;erniuxxx&apos;, password=&apos;888&apos;, birthday=&apos;1992.10.28&apos;, mobile=&apos;133xxxx&apos;, address=&apos;北京市朝阳区&apos;&#125; 另外发现一个小问题，如果配置中定义使用”user” 123user: name: erniuxxx password: 888 那么获取的name将会是电脑的名称，好神奇。 1UserBody&#123;name=&apos;erniu&apos;, password=&apos;888&apos;, birthday=&apos;1992.10.28&apos;, mobile=&apos;133xxxx&apos;, address=&apos;北京市朝阳区&apos;&#125; 还有，在application.yml中的各个参数之间也可以直接互相引用： 12345user: name: erniuxxx password: 888 address: 北京市朝阳区 remark: $&#123;address&#125;-$&#123;name&#125; 自定义配置文件 application.yml是系统默认的配置文件，当然我们也可以创建自定义配置文件，在路径src/main/resources下面创建文件test.propertiesPS：spring boot 1.5版本后@PropertySource注解就不能加载自定义的yml配置文件了 test.properties：123TestUser.name = &quot;songxiao222&quot;TestUser.password = &quot;123&quot;TestUser.birthday = &quot;1992.10.28&quot; 将配置赋值到javabean: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546/** * Created by qianqian.niu on 2017/6/27. */@Configuration//@PropertySource(&quot;classpath:test1.yml&quot;)@PropertySource(&quot;classpath:test.properties&quot;)@ConfigurationProperties(prefix = &quot;TestUser&quot;)public class TestUser &#123; private String name; private String password; private String birthday; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public String getPassword() &#123; return password; &#125; public void setPassword(String password) &#123; this.password = password; &#125; public String getBirthday() &#123; return birthday; &#125; public void setBirthday(String birthday) &#123; this.birthday = birthday; &#125; @Override public String toString() &#123; return &quot;UserBody&#123;&quot; + &quot;name=&apos;&quot; + name + &apos;\&apos;&apos; + &quot;, password=&apos;&quot; + password + &apos;\&apos;&apos; + &quot;, birthday=&apos;&quot; + birthday + &apos;\&apos;&apos; + &apos;&#125;&apos;; &#125;&#125; @Configuration 注解包含@Component注解 spring boot如果是1.5以前的版本，那么可以通过locations指定properties文件的位置： 1@ConfigurationProperties(prefix = &quot;TestUser&quot;,locations=&quot;classpath:test.properties&quot;) 1.5版本后需要通过@PropertySource(“classpath:test.properties”)指定配置文件 Controller 读取配置： 123456789101112131415161718192021222324/** * Created by qianqian.niu on 2017/6/27. */@RestController@EnableConfigurationProperties(&#123;TestUser.class,UserBody.class&#125;)public class HelloConfigController &#123; @Autowired TestUser testUser; @Autowired UserBody userBody; @GetMapping(&quot;/getTestUser&quot;) public String getTestUser()&#123; return testUser.toString(); &#125; @GetMapping(&quot;/getUser&quot;) public String getUser()&#123; return userBody.toString(); &#125;&#125; 多个环境配置文件 关于多环境配置文件，之前写过一篇博客：http://blog.csdn.net/u010028869/article/details/50818710通过maven的 –P命令来指定打包时的使用那个配置文件。 相比而言Spring Boot 提供的这种方式真是太简单了 在Spring Boot中多环境配置文件名需要满足application-{profile}.properties的格式，其中{profile}对应你的环境标识，比如： 1234567891011application-test.properties：测试环境server: port: 8083 application-dev.properties：开发环境server: port: 8081 application-prod.properties：生产环境server: port: 8082 想要使用对应的环境，只需要在application.yml中使用spring.profiles.active属性来设置，值就是{profile}，如dev、prod。 123spring: profiles: active: dev 启动工程，发现程序的端口不再是8080,而是8081 当然用jar命令启动jar包的时候也可以指定使用哪个配置文件： 1java -jar xxx.jar --spring.profiles.active=dev 小结： Spring Boot的配置还是相当简便的，希望在此整理的有关配置的信息能够帮到大家。这里也埋了个小坑，就是如何加载自定义的yml文件，下次讲到Spring Boot自定义监听器的时候在解决这个问题~ 源码下载：https://github.com/forezp/SpringBootLearning]]></content>
  </entry>
</search>
